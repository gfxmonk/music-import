#!/usr/bin/env python

import re
import urllib
import os
import sys
import readline
import shutil

DEBUG = False
INTERACTIVE = True

class FormatError (ValueError):
	pass

def metainf(path):
	from tagpy import FileRef
	return FileRef(path)

def meta_artist_and_name(path):
	meta = metainf(path)
	artist = meta.tag().artist
	name = meta.tag().title
	return (artist, name)

def set_metadata(path, artist, name, clear_comments=True):
	meta = metainf(path)
	meta.tag().artist = artist
	meta.tag().title = name
	if clear_comments:
		meta.tag().comment = ''
	meta.save()


def artist_and_name(parts):
	parts = list([p.strip() for p in parts if len(p) > 0])

	while(len(parts) > 1 and parts[0].isdigit()):
		# drop leading numeric fields
		parts.pop(0)
	
	if(len(parts) > 3):
		# if there's still more than 3 parts, drop all numeric fields
		parts = filter(lambda x: not x.isdigit(), parts)

	if len(parts) < 2:
		raise FormatError("not enough parts: %r" % (parts))
	if len(parts) == 2:
		return tuple(parts)
	else:
		return parts[0], parts[2] # assume artist - album - track

def titleize(s):
	return " ".join([word.capitalize() for word in s.split()])

def filename(args):
	joined = " - ".join(args)
	joined = joined.replace("/",'-')
	if isinstance(joined, unicode):
		joined = joined.encode('ascii', 'ignore')
	return joined

def get_artist_and_name(dirty):
	def num(char, s):
		return len(map(lambda x: x == char, s))

	def unescape_url(s):
		return urllib.unquote(s)

	def replace_if_too_many(char, replacement, s):
		num_char = num(char, s)
		num_repl = num(replacement, s)
		if num_char > num_repl:
			return s.replace(char, replacement)
		return s
	
	def replace_if_too_many_plusses(s):
		return replace_if_too_many("-", " ", s)
	
	def replace_if_too_many_dashes(s):
		return replace_if_too_many("-", " ", s)
	
	def normalize_spaces(s):
		s = s.replace("   ", " - ")
		s = re.subn(" +", " ", s)[0]
		return s

	cleaned = unescape_url(dirty)
	cleaned = cleaned.replace("_", " ")
	cleaned = replace_if_too_many_plusses(cleaned)
	cleaned = replace_if_too_many_dashes(cleaned)
	cleaned = normalize_spaces(cleaned)
	cleaned = " ".join([x.capitalize() for x in cleaned.split(" ")])
	parts = cleaned.split(" - ")
	if len(parts) == 1:
		parts = cleaned.split("-")
	named_parts = artist_and_name(parts)
	return named_parts

	
def rename(path, output_dir=None):
	base, file = os.path.split(path)
	name, ext = os.path.splitext(file)
	if output_dir is None:
		output_dir = base # whatever directory it started in
	ext = ext.lower()
	try:
		artist_and_name = get_artist_and_name(name)
	except FormatError, e:
		print "-- warning: couldn't extract name from filename: %r" % (name,)
		artist_and_name = map(titleize, meta_artist_and_name(path))
	return os.path.join(output_dir, filename(artist_and_name) + ext), artist_and_name


def repl(paths, output_dir=None, update_tags=True, clear_comments=False, mp3gain=False):
	global INTERACTIVE
	if not paths: paths = ["."]
	files = []
	renamed = 0
	failed = 0
	for path in paths:
		realpath = os.path.realpath(os.path.expanduser(path))
		if os.path.isfile(realpath):
			files.append(path)
		else:
			for file in os.listdir(realpath):
				_path = os.path.join(realpath, file)
				if os.path.isfile(_path):
					files.append(_path)
	print "renaming %s files..." % (len(files),)

	def _continue(name):
		global INTERACTIVE
		if INTERACTIVE:
			response = raw_input("rename to %r ([y]es / [n]o / [a]ll / [q]uit): " % (name,)).rstrip()
			if response == 'a':
				print "renaming all..."
				INTERACTIVE = False
				return True
			elif response == 'n':
				print "skipping..."
				return False
			elif response == '' or response == 'y':
				return True
			else:
				print "quitting..."
				exit(1)
		else:
			return True

	for file in files:
		print "--- processing: %s" % (file,)
		try:
			shutil.copy(file, os.path.expanduser('~/.local/share/Trash/files'))
		except IOError:
			print "--- warning: could not make backup in trash"
			INTERACTIVE = True
		try:
			new_path, artist_and_name = rename(file, output_dir)
		except StandardError, err:
			print "Failed: %s - %s" % (file, err)
			failed += 1
			if DEBUG: raise
			continue
		if _continue(filename(artist_and_name)):
			if DEBUG: continue
			treat_file(file, new_path, artist_and_name, update_tags=update_tags, clear_comments=clear_comments, mp3gain=mp3gain)
			renamed += 1
	return renamed, failed

def treat_file(file, new_path, artist_and_name, update_tags=True, clear_comments=False, mp3gain=False):
	shutil.move(file, new_path)
	if not update_tags: return
	try:
		set_metadata(new_path, *artist_and_name, clear_comments=clear_comments)
	except RuntimeError, e:
		print "(couldn't set metadata on song file: %s)" % (e,)
		if DEBUG: raise
	
	if mp3gain:
		apply_mp3gain(new_path)
			
def apply_mp3gain(path):
	import subprocess
	cmd = subprocess.Popen(['mp3gain', '-r', '-c', '-m', '2', '-s', 'r', path], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	stdout, stderr = cmd.communicate()
	if cmd.returncode != 0:
		print "ERROR: mp3gain failed:\nSTDOUT: %s\n\nSTDERR: %s" % (stdout, stderr)
		if DEBUG: raise OSError("mp3gain failed!")

def notify(title, message):
	import pygtk
	import pynotify
	pynotify.init(os.path.basename(sys.argv[0]))
	pynotify.Notification(title, message).show()

def _main(argv):
	global DEBUG, INTERACTIVE
	from optparse import OptionParser
	parser = OptionParser(usage="usage: %prog [options] [input-file-or-path]")
	parser.add_option('-c','--clear-comments', dest='clear_comments', action='store_true', help='clear comments (%default)', default=False)
	parser.add_option('-o','--output', dest='output_dir', action='store', help='output directory', default=None)
	parser.add_option('-i', '--interactive', dest='interactive', action='store_true', help='interactive mode (%default)', default=True)
	parser.add_option('-d', '--debug', dest='debug', action='store_true', help='debug mode')
	parser.add_option('-t', '--tags', dest='update_tags', action='store_true', help='overwrite id3 tag info', default=True)
	parser.add_option('--no-tags', dest='update_tags', action='store_false')
	parser.add_option('-n', '--notify', dest='notify', action='store_true', help='notify on completion (%default)', default=True)
	parser.add_option('--no-notify', dest='notify', action='store_false', help='don\'t notify on completion')
	parser.add_option('-g', '--mp3gain', dest='mp3gain', action='store_true', help='apply mp3gain (%default)', default=False)

	options, args = parser.parse_args(argv)
	DEBUG = options.debug
	INTERACTIVE = options.interactive
	files_changed, failed = repl(args, output_dir=options.output_dir, update_tags=options.update_tags, clear_comments=options.clear_comments, mp3gain=options.mp3gain)
	if options.notify:
		message = "%s files imported" % (files_changed,)
		if failed:
			message += " - %s FAILED" % (failed,)
		notify("Music importer", message)


def main():
	import sys
	try:
		_main(sys.argv[1:])
		sys.exit(0)
	except StandardError, e:
		print "ERROR: %s" % (e,)
		if DEBUG: raise
		sys.exit(2)

if __name__ == '__main__':
	main()
